// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_message.proto

#ifndef PROTOBUF_net_5fmessage_2eproto__INCLUDED
#define PROTOBUF_net_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NetMessage {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_net_5fmessage_2eproto();
void protobuf_AssignDesc_net_5fmessage_2eproto();
void protobuf_ShutdownFile_net_5fmessage_2eproto();

class MessagePack;

// ===================================================================

class MessagePack : public ::google::protobuf::Message {
 public:
  MessagePack();
  virtual ~MessagePack();

  MessagePack(const MessagePack& from);

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePack& default_instance();

  void Swap(MessagePack* other);

  // implements Message ----------------------------------------------

  inline MessagePack* New() const { return New(NULL); }

  MessagePack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagePack& from);
  void MergeFrom(const MessagePack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessagePack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uProtocol = 1;
  void clear_uprotocol();
  static const int kUProtocolFieldNumber = 1;
  ::google::protobuf::uint32 uprotocol() const;
  void set_uprotocol(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:NetMessage.MessagePack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 uprotocol_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_5fmessage_2eproto();
  friend void protobuf_AssignDesc_net_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_net_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static MessagePack* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessagePack

// optional uint32 uProtocol = 1;
inline void MessagePack::clear_uprotocol() {
  uprotocol_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::uprotocol() const {
  // @@protoc_insertion_point(field_get:NetMessage.MessagePack.uProtocol)
  return uprotocol_;
}
inline void MessagePack::set_uprotocol(::google::protobuf::uint32 value) {
  
  uprotocol_ = value;
  // @@protoc_insertion_point(field_set:NetMessage.MessagePack.uProtocol)
}

// optional uint32 type = 2;
inline void MessagePack::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::type() const {
  // @@protoc_insertion_point(field_get:NetMessage.MessagePack.type)
  return type_;
}
inline void MessagePack::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMessage.MessagePack.type)
}

// optional bytes content = 3;
inline void MessagePack::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePack::content() const {
  // @@protoc_insertion_point(field_get:NetMessage.MessagePack.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePack::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMessage.MessagePack.content)
}
inline void MessagePack::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMessage.MessagePack.content)
}
inline void MessagePack::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMessage.MessagePack.content)
}
inline ::std::string* MessagePack::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:NetMessage.MessagePack.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePack::release_content() {
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePack::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:NetMessage.MessagePack.content)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetMessage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_5fmessage_2eproto__INCLUDED
