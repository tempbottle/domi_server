// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetMessage {

namespace {

const ::google::protobuf::Descriptor* MessagePack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_5fmessage_2eproto() {
  protobuf_AddDesc_net_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net_message.proto");
  GOOGLE_CHECK(file != NULL);
  MessagePack_descriptor_ = file->message_type(0);
  static const int MessagePack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePack, uprotocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePack, content_),
  };
  MessagePack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessagePack_descriptor_,
      MessagePack::default_instance_,
      MessagePack_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessagePack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePack, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessagePack_descriptor_, &MessagePack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_5fmessage_2eproto() {
  delete MessagePack::default_instance_;
  delete MessagePack_reflection_;
}

void protobuf_AddDesc_net_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net_message.proto\022\nNetMessage\"\?\n\013Messa"
    "gePack\022\021\n\tuProtocol\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022"
    "\017\n\007content\030\003 \001(\014b\006proto3", 104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net_message.proto", &protobuf_RegisterTypes);
  MessagePack::default_instance_ = new MessagePack();
  MessagePack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_5fmessage_2eproto {
  StaticDescriptorInitializer_net_5fmessage_2eproto() {
    protobuf_AddDesc_net_5fmessage_2eproto();
  }
} static_descriptor_initializer_net_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MessagePack::kUProtocolFieldNumber;
const int MessagePack::kTypeFieldNumber;
const int MessagePack::kContentFieldNumber;
#endif  // !_MSC_VER

MessagePack::MessagePack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetMessage.MessagePack)
}

void MessagePack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessagePack::MessagePack(const MessagePack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetMessage.MessagePack)
}

void MessagePack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uprotocol_ = 0u;
  type_ = 0u;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessagePack::~MessagePack() {
  // @@protoc_insertion_point(destructor:NetMessage.MessagePack)
  SharedDtor();
}

void MessagePack::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessagePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePack_descriptor_;
}

const MessagePack& MessagePack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_5fmessage_2eproto();
  return *default_instance_;
}

MessagePack* MessagePack::default_instance_ = NULL;

MessagePack* MessagePack::New(::google::protobuf::Arena* arena) const {
  MessagePack* n = new MessagePack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessagePack::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessagePack*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uprotocol_, type_);
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MessagePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetMessage.MessagePack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uProtocol = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uprotocol_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetMessage.MessagePack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetMessage.MessagePack)
  return false;
#undef DO_
}

void MessagePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetMessage.MessagePack)
  // optional uint32 uProtocol = 1;
  if (this->uprotocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uprotocol(), output);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional bytes content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetMessage.MessagePack)
}

::google::protobuf::uint8* MessagePack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessage.MessagePack)
  // optional uint32 uProtocol = 1;
  if (this->uprotocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uprotocol(), target);
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetMessage.MessagePack)
  return target;
}

int MessagePack::ByteSize() const {
  int total_size = 0;

  // optional uint32 uProtocol = 1;
  if (this->uprotocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uprotocol());
  }

  // optional uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessagePack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessagePack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePack::MergeFrom(const MessagePack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uprotocol() != 0) {
    set_uprotocol(from.uprotocol());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void MessagePack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePack::CopyFrom(const MessagePack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePack::IsInitialized() const {

  return true;
}

void MessagePack::Swap(MessagePack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessagePack::InternalSwap(MessagePack* other) {
  std::swap(uprotocol_, other->uprotocol_);
  std::swap(type_, other->type_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessagePack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePack_descriptor_;
  metadata.reflection = MessagePack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessagePack

// optional uint32 uProtocol = 1;
void MessagePack::clear_uprotocol() {
  uprotocol_ = 0u;
}
 ::google::protobuf::uint32 MessagePack::uprotocol() const {
  // @@protoc_insertion_point(field_get:NetMessage.MessagePack.uProtocol)
  return uprotocol_;
}
 void MessagePack::set_uprotocol(::google::protobuf::uint32 value) {
  
  uprotocol_ = value;
  // @@protoc_insertion_point(field_set:NetMessage.MessagePack.uProtocol)
}

// optional uint32 type = 2;
void MessagePack::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 MessagePack::type() const {
  // @@protoc_insertion_point(field_get:NetMessage.MessagePack.type)
  return type_;
}
 void MessagePack::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NetMessage.MessagePack.type)
}

// optional bytes content = 3;
void MessagePack::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessagePack::content() const {
  // @@protoc_insertion_point(field_get:NetMessage.MessagePack.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessagePack::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetMessage.MessagePack.content)
}
 void MessagePack::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetMessage.MessagePack.content)
}
 void MessagePack::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetMessage.MessagePack.content)
}
 ::std::string* MessagePack::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:NetMessage.MessagePack.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessagePack::release_content() {
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessagePack::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:NetMessage.MessagePack.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NetMessage

// @@protoc_insertion_point(global_scope)
